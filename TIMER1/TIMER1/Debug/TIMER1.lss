
TIMER1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009bb  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000713  00000000  00000000  00000d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000570  00000000  00000000  0000141a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d5  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000375  00000000  00000000  00001f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000022c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  64:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDir>:
#include "DIO_interface.h"
#include "DIO_reg.h"
/************* Pin Direction Set Function *************/
void DIO_voidSetPinDir(u8 copy_u8port , u8 copy_u8pin ,u8 copy_u8dir){
	
	if(copy_u8dir == OUTPUT){
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <DIO_voidSetPinDir+0x6c>
		switch(copy_u8port){
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <DIO_voidSetPinDir+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_voidSetPinDir+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <DIO_voidSetPinDir+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <DIO_voidSetPinDir+0x56>
  7e:	08 95       	ret
			
			case DIO_PORTA : SET_BIT(DDRA_REG,copy_u8pin) ; break;
  80:	2a b3       	in	r18, 0x1a	; 26
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <DIO_voidSetPinDir+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <DIO_voidSetPinDir+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8a bb       	out	0x1a, r24	; 26
  94:	08 95       	ret
			case DIO_PORTB : SET_BIT(DDRB_REG,copy_u8pin) ; break;
  96:	27 b3       	in	r18, 0x17	; 23
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_voidSetPinDir+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_voidSetPinDir+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	08 95       	ret
			case DIO_PORTC : SET_BIT(DDRC_REG,copy_u8pin) ; break;
  ac:	24 b3       	in	r18, 0x14	; 20
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinDir+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinDir+0x48>
  bc:	82 2b       	or	r24, r18
  be:	84 bb       	out	0x14, r24	; 20
  c0:	08 95       	ret
			case DIO_PORTD : SET_BIT(DDRD_REG,copy_u8pin) ; break;
  c2:	21 b3       	in	r18, 0x11	; 17
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_voidSetPinDir+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_voidSetPinDir+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	81 bb       	out	0x11, r24	; 17
  d6:	08 95       	ret
			
		}
	}
	else if (copy_u8dir == INPUT){
  d8:	41 11       	cpse	r20, r1
  da:	37 c0       	rjmp	.+110    	; 0x14a <DIO_voidSetPinDir+0xde>
		switch(copy_u8port){
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 f0       	breq	.+36     	; 0x104 <DIO_voidSetPinDir+0x98>
  e0:	28 f0       	brcs	.+10     	; 0xec <DIO_voidSetPinDir+0x80>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	d9 f0       	breq	.+54     	; 0x11c <DIO_voidSetPinDir+0xb0>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	29 f1       	breq	.+74     	; 0x134 <DIO_voidSetPinDir+0xc8>
  ea:	08 95       	ret
			
			case DIO_PORTA : CLR_BIT(DDRA_REG,copy_u8pin) ; break;
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_voidSetPinDir+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_voidSetPinDir+0x88>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a bb       	out	0x1a, r24	; 26
 102:	08 95       	ret
			case DIO_PORTB : CLR_BIT(DDRB_REG,copy_u8pin) ; break;
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_voidSetPinDir+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_voidSetPinDir+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
			case DIO_PORTC : CLR_BIT(DDRC_REG,copy_u8pin) ; break;
 11c:	24 b3       	in	r18, 0x14	; 20
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_voidSetPinDir+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_voidSetPinDir+0xb8>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
			case DIO_PORTD : CLR_BIT(DDRD_REG,copy_u8pin) ; break;
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_voidSetPinDir+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_voidSetPinDir+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret

0000014c <main>:
{
	
	
	u16 val=0 ; 
	
	DIO_voidSetPinDir(DIO_PORTD,DIO_PIN5,OUTPUT) ;
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	65 e0       	ldi	r22, 0x05	; 5
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	TIMER1_voidFastPWMICR1();
 156:	0e 94 bf 00 	call	0x17e	; 0x17e <TIMER1_voidFastPWMICR1>
    while (1) 
    {
		for (val=2000;val<=4000;val++)
 15a:	c0 ed       	ldi	r28, 0xD0	; 208
 15c:	d7 e0       	ldi	r29, 0x07	; 7
 15e:	0a c0       	rjmp	.+20     	; 0x174 <main+0x28>
		{
			TIMER1_voidSetOCRVal(val) ;
 160:	ce 01       	movw	r24, r28
 162:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <TIMER1_voidSetOCRVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	8f e1       	ldi	r24, 0x1F	; 31
 168:	9e e4       	ldi	r25, 0x4E	; 78
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0x1e>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x24>
 170:	00 00       	nop
	
	DIO_voidSetPinDir(DIO_PORTD,DIO_PIN5,OUTPUT) ;
	TIMER1_voidFastPWMICR1();
    while (1) 
    {
		for (val=2000;val<=4000;val++)
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	c1 3a       	cpi	r28, 0xA1	; 161
 176:	9f e0       	ldi	r25, 0x0F	; 15
 178:	d9 07       	cpc	r29, r25
 17a:	90 f3       	brcs	.-28     	; 0x160 <main+0x14>
 17c:	ee cf       	rjmp	.-36     	; 0x15a <main+0xe>

0000017e <TIMER1_voidFastPWMICR1>:
 
 
void TIMER1_voidFastPWMICR1(void){
	
	/********* Select Mode Fast PWM ICR1 **********/
	CLR_BIT(TCCR1A_REG,0);
 17e:	8f b5       	in	r24, 0x2f	; 47
 180:	90 b7       	in	r25, 0x30	; 48
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	90 bf       	out	0x30, r25	; 48
 186:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A_REG,1);
 188:	8f b5       	in	r24, 0x2f	; 47
 18a:	90 b7       	in	r25, 0x30	; 48
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	90 bf       	out	0x30, r25	; 48
 190:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B_REG,3);
 192:	8e b5       	in	r24, 0x2e	; 46
 194:	9f b5       	in	r25, 0x2f	; 47
 196:	88 60       	ori	r24, 0x08	; 8
 198:	9f bd       	out	0x2f, r25	; 47
 19a:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG,4);
 19c:	8e b5       	in	r24, 0x2e	; 46
 19e:	9f b5       	in	r25, 0x2f	; 47
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	9f bd       	out	0x2f, r25	; 47
 1a4:	8e bd       	out	0x2e, r24	; 46
	/********* Fast PWM :NON Intverting Mode ********/
	SET_BIT(TCCR1A_REG,7);
 1a6:	8f b5       	in	r24, 0x2f	; 47
 1a8:	90 b7       	in	r25, 0x30	; 48
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	90 bf       	out	0x30, r25	; 48
 1ae:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,6);
 1b0:	8f b5       	in	r24, 0x2f	; 47
 1b2:	90 b7       	in	r25, 0x30	; 48
 1b4:	8f 7b       	andi	r24, 0xBF	; 191
 1b6:	90 bf       	out	0x30, r25	; 48
 1b8:	8f bd       	out	0x2f, r24	; 47
	/*********** Select Prescaler ***************/
	 
	 CLR_BIT(TCCR1B_REG,0) ;
 1ba:	8e b5       	in	r24, 0x2e	; 46
 1bc:	9f b5       	in	r25, 0x2f	; 47
 1be:	8e 7f       	andi	r24, 0xFE	; 254
 1c0:	9f bd       	out	0x2f, r25	; 47
 1c2:	8e bd       	out	0x2e, r24	; 46
	 SET_BIT(TCCR1B_REG,1) ;
 1c4:	8e b5       	in	r24, 0x2e	; 46
 1c6:	9f b5       	in	r25, 0x2f	; 47
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	9f bd       	out	0x2f, r25	; 47
 1cc:	8e bd       	out	0x2e, r24	; 46
	 CLR_BIT(TCCR1B_REG,2) ;
 1ce:	8e b5       	in	r24, 0x2e	; 46
 1d0:	9f b5       	in	r25, 0x2f	; 47
 1d2:	8b 7f       	andi	r24, 0xFB	; 251
 1d4:	9f bd       	out	0x2f, r25	; 47
 1d6:	8e bd       	out	0x2e, r24	; 46
	/***** SET TOP VALUE 40000 --> F=50Hz / P=20ms ***************/
	ICR1_REG=40000;
 1d8:	80 e4       	ldi	r24, 0x40	; 64
 1da:	9c e9       	ldi	r25, 0x9C	; 156
 1dc:	97 bd       	out	0x27, r25	; 39
 1de:	86 bd       	out	0x26, r24	; 38
 1e0:	08 95       	ret

000001e2 <TIMER1_voidSetOCRVal>:
	
}

void TIMER1_voidSetOCRVal(u16 copy_u16val){
	
	OCR1A_REG=copy_u16val;
 1e2:	9b bd       	out	0x2b, r25	; 43
 1e4:	8a bd       	out	0x2a, r24	; 42
 1e6:	08 95       	ret

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
