
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000850  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065d  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f6  00000000  00000000  0000113d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dc  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000488  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPortDir>:

/************* Port Direction set Function *************/

void DIO_voidSetPortDir(u8 copy_u8port , u8 copy_u8dir){
	
	if(copy_u8dir == HIGH){
  6c:	61 30       	cpi	r22, 0x01	; 1
  6e:	c1 f4       	brne	.+48     	; 0xa0 <DIO_voidSetPortDir+0x34>
		
		switch(copy_u8port){
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	51 f0       	breq	.+20     	; 0x88 <DIO_voidSetPortDir+0x1c>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_voidSetPortDir+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	59 f0       	breq	.+22     	; 0x90 <DIO_voidSetPortDir+0x24>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	69 f0       	breq	.+26     	; 0x98 <DIO_voidSetPortDir+0x2c>
  7e:	08 95       	ret
			
			case DIO_PORTA : DDRA_REG |= 0xFF ; break ;
  80:	8a b3       	in	r24, 0x1a	; 26
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
  86:	08 95       	ret
			case DIO_PORTB : DDRB_REG |= 0xFF ; break ;
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	87 bb       	out	0x17, r24	; 23
  8e:	08 95       	ret
			case DIO_PORTC : DDRC_REG |= 0xFF ; break ;
  90:	84 b3       	in	r24, 0x14	; 20
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
  96:	08 95       	ret
			case DIO_PORTD : DDRD_REG |= 0xFF ; break ;
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 bb       	out	0x11, r24	; 17
  9e:	08 95       	ret
		}	
			
	}
	else if (copy_u8dir == LOW){
  a0:	61 11       	cpse	r22, r1
  a2:	13 c0       	rjmp	.+38     	; 0xca <DIO_voidSetPortDir+0x5e>
		
		switch(copy_u8port){
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	49 f0       	breq	.+18     	; 0xba <DIO_voidSetPortDir+0x4e>
  a8:	28 f0       	brcs	.+10     	; 0xb4 <DIO_voidSetPortDir+0x48>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	49 f0       	breq	.+18     	; 0xc0 <DIO_voidSetPortDir+0x54>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	51 f0       	breq	.+20     	; 0xc6 <DIO_voidSetPortDir+0x5a>
  b2:	08 95       	ret
			
			case DIO_PORTA : DDRA_REG &= 0x00 ; break ;
  b4:	8a b3       	in	r24, 0x1a	; 26
  b6:	1a ba       	out	0x1a, r1	; 26
  b8:	08 95       	ret
			case DIO_PORTB : DDRB_REG &= 0x00 ; break ;
  ba:	87 b3       	in	r24, 0x17	; 23
  bc:	17 ba       	out	0x17, r1	; 23
  be:	08 95       	ret
			case DIO_PORTC : DDRC_REG &= 0x00 ; break ;
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	14 ba       	out	0x14, r1	; 20
  c4:	08 95       	ret
			case DIO_PORTD : DDRD_REG &= 0x00 ; break ;
  c6:	81 b3       	in	r24, 0x11	; 17
  c8:	11 ba       	out	0x11, r1	; 17
  ca:	08 95       	ret

000000cc <DIO_voidSetPortVal>:

/************* Port Value set Function *************/

void DIO_voidSetPortVal(u8 copy_u8port , u8 copy_u8val){
	
	if(copy_u8val == HIGH){
  cc:	61 30       	cpi	r22, 0x01	; 1
  ce:	c1 f4       	brne	.+48     	; 0x100 <DIO_voidSetPortVal+0x34>
		
		switch(copy_u8port){
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	51 f0       	breq	.+20     	; 0xe8 <DIO_voidSetPortVal+0x1c>
  d4:	28 f0       	brcs	.+10     	; 0xe0 <DIO_voidSetPortVal+0x14>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	59 f0       	breq	.+22     	; 0xf0 <DIO_voidSetPortVal+0x24>
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	69 f0       	breq	.+26     	; 0xf8 <DIO_voidSetPortVal+0x2c>
  de:	08 95       	ret
			
			case DIO_PORTA : PORTA_REG |= 0xFF ; break;
  e0:	8b b3       	in	r24, 0x1b	; 27
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	08 95       	ret
			case DIO_PORTB : PORTA_REG |= 0xFF ; break;
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	08 95       	ret
			case DIO_PORTC : PORTA_REG |= 0xFF ; break;
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	08 95       	ret
			case DIO_PORTD : PORTA_REG |= 0xFF ; break;
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	08 95       	ret
		}
	}
	else if(copy_u8val == LOW){
 100:	61 11       	cpse	r22, r1
 102:	13 c0       	rjmp	.+38     	; 0x12a <DIO_voidSetPortVal+0x5e>
		   switch(copy_u8port){
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	49 f0       	breq	.+18     	; 0x11a <DIO_voidSetPortVal+0x4e>
 108:	28 f0       	brcs	.+10     	; 0x114 <DIO_voidSetPortVal+0x48>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	49 f0       	breq	.+18     	; 0x120 <DIO_voidSetPortVal+0x54>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	51 f0       	breq	.+20     	; 0x126 <DIO_voidSetPortVal+0x5a>
 112:	08 95       	ret
			   
			case DIO_PORTA : PORTA_REG &= 0x00 ; break;
 114:	8b b3       	in	r24, 0x1b	; 27
 116:	1b ba       	out	0x1b, r1	; 27
 118:	08 95       	ret
			case DIO_PORTB : PORTA_REG &= 0x00 ; break;
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	1b ba       	out	0x1b, r1	; 27
 11e:	08 95       	ret
			case DIO_PORTC : PORTA_REG &= 0x00 ; break;
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	1b ba       	out	0x1b, r1	; 27
 124:	08 95       	ret
			case DIO_PORTD : PORTA_REG &= 0x00 ; break;
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	1b ba       	out	0x1b, r1	; 27
 12a:	08 95       	ret

0000012c <main>:



int main(void)
{
    DIO_voidSetPortDir(DIO_PORTA , OUTPUT);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPortDir>
    while (1) 
    {
		DIO_voidSetPortVal(DIO_PORTA, HIGH);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_voidSetPortVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	89 e6       	ldi	r24, 0x69	; 105
 140:	98 e1       	ldi	r25, 0x18	; 24
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x16>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x20>
 14c:	00 00       	nop
		_delay_ms(500) ;
		DIO_voidSetPortVal(DIO_PORTA, LOW);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_voidSetPortVal>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	89 e6       	ldi	r24, 0x69	; 105
 15a:	98 e1       	ldi	r25, 0x18	; 24
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x30>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x3a>
 166:	00 00       	nop
 168:	e5 cf       	rjmp	.-54     	; 0x134 <main+0x8>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
