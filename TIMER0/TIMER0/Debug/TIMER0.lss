
TIMER0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000971  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d8  00000000  00000000  00000d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b8  00000000  00000000  00001425  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000473  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004bd  00000000  00000000  00001eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_10>
  2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidSetPinDir>:
#include "DIO_interface.h"
#include "DIO_reg.h"
/************* Pin Direction Set Function *************/
void DIO_voidSetPinDir(u8 copy_u8port , u8 copy_u8pin ,u8 copy_u8dir){
	
	if(copy_u8dir == OUTPUT){
  7c:	41 30       	cpi	r20, 0x01	; 1
  7e:	a1 f5       	brne	.+104    	; 0xe8 <DIO_voidSetPinDir+0x6c>
		switch(copy_u8port){
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	89 f0       	breq	.+34     	; 0xa6 <DIO_voidSetPinDir+0x2a>
  84:	28 f0       	brcs	.+10     	; 0x90 <DIO_voidSetPinDir+0x14>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	c9 f0       	breq	.+50     	; 0xbc <DIO_voidSetPinDir+0x40>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	11 f1       	breq	.+68     	; 0xd2 <DIO_voidSetPinDir+0x56>
  8e:	08 95       	ret
			
			case DIO_PORTA : SET_BIT(DDRA_REG,copy_u8pin) ; break;
  90:	2a b3       	in	r18, 0x1a	; 26
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <DIO_voidSetPinDir+0x20>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	6a 95       	dec	r22
  9e:	e2 f7       	brpl	.-8      	; 0x98 <DIO_voidSetPinDir+0x1c>
  a0:	82 2b       	or	r24, r18
  a2:	8a bb       	out	0x1a, r24	; 26
  a4:	08 95       	ret
			case DIO_PORTB : SET_BIT(DDRB_REG,copy_u8pin) ; break;
  a6:	27 b3       	in	r18, 0x17	; 23
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_voidSetPinDir+0x36>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_voidSetPinDir+0x32>
  b6:	82 2b       	or	r24, r18
  b8:	87 bb       	out	0x17, r24	; 23
  ba:	08 95       	ret
			case DIO_PORTC : SET_BIT(DDRC_REG,copy_u8pin) ; break;
  bc:	24 b3       	in	r18, 0x14	; 20
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinDir+0x4c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinDir+0x48>
  cc:	82 2b       	or	r24, r18
  ce:	84 bb       	out	0x14, r24	; 20
  d0:	08 95       	ret
			case DIO_PORTD : SET_BIT(DDRD_REG,copy_u8pin) ; break;
  d2:	21 b3       	in	r18, 0x11	; 17
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_voidSetPinDir+0x62>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_voidSetPinDir+0x5e>
  e2:	82 2b       	or	r24, r18
  e4:	81 bb       	out	0x11, r24	; 17
  e6:	08 95       	ret
			
		}
	}
	else if (copy_u8dir == INPUT){
  e8:	41 11       	cpse	r20, r1
  ea:	37 c0       	rjmp	.+110    	; 0x15a <DIO_voidSetPinDir+0xde>
		switch(copy_u8port){
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	91 f0       	breq	.+36     	; 0x114 <DIO_voidSetPinDir+0x98>
  f0:	28 f0       	brcs	.+10     	; 0xfc <DIO_voidSetPinDir+0x80>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	d9 f0       	breq	.+54     	; 0x12c <DIO_voidSetPinDir+0xb0>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	29 f1       	breq	.+74     	; 0x144 <DIO_voidSetPinDir+0xc8>
  fa:	08 95       	ret
			
			case DIO_PORTA : CLR_BIT(DDRA_REG,copy_u8pin) ; break;
  fc:	2a b3       	in	r18, 0x1a	; 26
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_voidSetPinDir+0x8c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_voidSetPinDir+0x88>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	8a bb       	out	0x1a, r24	; 26
 112:	08 95       	ret
			case DIO_PORTB : CLR_BIT(DDRB_REG,copy_u8pin) ; break;
 114:	27 b3       	in	r18, 0x17	; 23
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_voidSetPinDir+0xa4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_voidSetPinDir+0xa0>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	87 bb       	out	0x17, r24	; 23
 12a:	08 95       	ret
			case DIO_PORTC : CLR_BIT(DDRC_REG,copy_u8pin) ; break;
 12c:	24 b3       	in	r18, 0x14	; 20
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_voidSetPinDir+0xbc>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_voidSetPinDir+0xb8>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	84 bb       	out	0x14, r24	; 20
 142:	08 95       	ret
			case DIO_PORTD : CLR_BIT(DDRD_REG,copy_u8pin) ; break;
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_voidSetPinDir+0xd4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_voidSetPinDir+0xd0>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	81 bb       	out	0x11, r24	; 17
 15a:	08 95       	ret

0000015c <main>:
	
	};
	
	
int main(void){
	DIO_voidSetPinDir(DIO_PORTB,DIO_PIN3,OUTPUT);
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDir>
	u8 i=0;	
	TIMER0_voidPCPWM(75);
 166:	8b e4       	ldi	r24, 0x4B	; 75
 168:	0e 94 b7 00 	call	0x16e	; 0x16e <TIMER0_voidPCPWM>
 16c:	ff cf       	rjmp	.-2      	; 0x16c <main+0x10>

0000016e <TIMER0_voidPCPWM>:

void TIMER0_voidPCPWM(u8 copy_u8dutycycle){
	
	/****** 2-Prescaler Selection *********************/
	
	TCCR0_REG &= 0b11111000;
 16e:	93 b7       	in	r25, 0x33	; 51
 170:	98 7f       	andi	r25, 0xF8	; 248
 172:	93 bf       	out	0x33, r25	; 51
	TCCR0_REG |= TIMER0_PRESCALER ;
 174:	93 b7       	in	r25, 0x33	; 51
 176:	94 60       	ori	r25, 0x04	; 4
 178:	93 bf       	out	0x33, r25	; 51
	
	SET_BIT(TCCR0_REG,6);
 17a:	93 b7       	in	r25, 0x33	; 51
 17c:	90 64       	ori	r25, 0x40	; 64
 17e:	93 bf       	out	0x33, r25	; 51
	CLR_BIT(TCCR0_REG,3);
 180:	93 b7       	in	r25, 0x33	; 51
 182:	97 7f       	andi	r25, 0xF7	; 247
 184:	93 bf       	out	0x33, r25	; 51
	SET_BIT(TCCR0_REG,5);
 186:	93 b7       	in	r25, 0x33	; 51
 188:	90 62       	ori	r25, 0x20	; 32
 18a:	93 bf       	out	0x33, r25	; 51
	CLR_BIT(TCCR0_REG,4);
 18c:	93 b7       	in	r25, 0x33	; 51
 18e:	9f 7e       	andi	r25, 0xEF	; 239
 190:	93 bf       	out	0x33, r25	; 51
	
	OCR0_REG=((copy_u8dutycycle*32)/1024)*31;
 192:	20 e2       	ldi	r18, 0x20	; 32
 194:	82 9f       	mul	r24, r18
 196:	c0 01       	movw	r24, r0
 198:	11 24       	eor	r1, r1
 19a:	89 2f       	mov	r24, r25
 19c:	85 95       	asr	r24
 19e:	85 95       	asr	r24
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	89 9f       	mul	r24, r25
 1a4:	80 2d       	mov	r24, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8c bf       	out	0x3c, r24	; 60
 1aa:	08 95       	ret

000001ac <__vector_11>:





ISR(_TIMER0_OVF){
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	
	OVF_ptr();
 1ce:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <OVF_ptr>
 1d2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <OVF_ptr+0x1>
 1d6:	09 95       	icall
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_10>:

ISR(_TIMER0_COMP){
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	
	CTC_ptr();
 21c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 220:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 224:	09 95       	icall
	
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
